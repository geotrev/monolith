// Switch CSS â€“ Just the grid. All the power.

//
// Choose class names. Defaults: .container | .row | .column
//

$class-names: (
  container: 'container',
  rows: 'row',
  columns: 'column'
);

//
// Choose breakpoint names and values. 
// *** NOTE: They are shared with breakpoint @mixin utilities & the grid generator
//

$breakpoints: (
  xsmall: 0,
  small: 576px,
  medium: 768px,
  large: 992px,
  xlarge: 1200px
);

//
// Choose container width modifier classes and their values
// Ex. class="narrow container"
//

$container-widths: (
  fluid: 100%,
  narrow: 768px,
  wide: 1200px
);

//
// Choose section names and padding for extra vertical space to focus content
// Ex. class="small-section wide container"
//

$container-sections: (
  small: 48px,
  medium: 96px,
  large: 144px
);

//
// Define column count and default spacing values for gutters
//

$columns: 12;
$default-space: 16px;

//
// Container and column spacing options + column flex order utility classes
//

$container-padding: true;
$column-gutter: true;
$column-gutter-bottom: true;
$column-order-classes: true;

//
// Default width for container + spacing for container and columns (if enabled)
//

$container-default-width: 992px;
$container-space: $default-space;
$column-gutter-space: $default-space / 2;
$column-bottom-space: $default-space;

$breakpoint-error: "One or more of your arguments wasn't a valid key for $breakpoints.";

//
// Breakpoint Mixins
// Use in your css for custom breakpoint behavior.
// *** NOTE: changes your breakpoint names will change your mixin arguments
//

// Breakpoint Up
// Ex. @include breakpoint-up(small) { ... }
//      ^-- applies styles to all sizes above "small" breakpoint

@mixin breakpoint-up($size) {
  @if map-has-key($breakpoints, $size) {
    @media screen and (min-width: #{map-get($breakpoints, $size)}) {
      @content;
    }
  } @else {
    @content;
    @error $breakpoint-error;
  }
}

// Breakpoint Down
// Ex. @include breakpoint-down(medium) { ... }
//      ^-- applies styles to all sizes below "medium" breakpoint

@mixin breakpoint-down($size) {
  @if map-has-key($breakpoints, $size) {
    @media screen and (max-width: #{map-get($breakpoints, $size) - 1}) {
      @content;
    }
  } @else {
    @content;
    @error $breakpoint-error;
  }
} // "-1" prevents overlap of 1px against next breakpoint

// Breakpoint Only
// Ex. @include breakpoint-only(small, xsmall) { ... }
//      ^-- applies styles only to "small" through "xsmall" breakpoints

@mixin breakpoint-only($size-min, $size-max) {
  @if map-has-key($breakpoints, $size-min) {
    @media screen and (min-width: #{map-get($breakpoints, $size-min)}) {
      @if map-has-key($breakpoints, $size-max) {
        @media screen and (max-width: #{map-get($breakpoints, $size-max) - 1}) {
          @content;
        } // "-1" prevents overlap of 1px against next breakpoint
      } @else {
        @content;
        @error $breakpoint-error;
      }
    }
  } @else {
    @content;
    @error $breakpoint-error;
  }
}

//
// Container, row, & column general styling
//

.#{map-get($class-names, container)} {
  margin: 0 auto;
  position: relative;
  max-width: $container-default-width;
  
  @if $container-padding == true {
    @include breakpoint-up(medium) {
      padding-left: $container-space;
      padding-right: $container-space;
    }
  }
  @each $name, $width in $container-widths {
    &.#{$name} { max-width: $width; }
  }
  @each $name, $spacing in $container-sections {
    &.#{$name}-section { padding-top: $spacing; padding-bottom: $spacing; }
  }
}

.#{map-get($class-names, container)}::before,
.#{map-get($class-names, container)}::after,
.#{map-get($class-names, container)} .#{map-get($class-names, rows)}::before,
.#{map-get($class-names, container)} .#{map-get($class-names, rows)}::after {
  display: block;
  padding: 0;
  margin: 0;
  height: 0;
}

.#{map-get($class-names, rows)} {
  display: flex;
  flex-flow: row wrap;
  position: relative;
  flex: 1 0 auto;
  width: 100%;
}

.#{map-get($class-names, columns)}s, .#{map-get($class-names, columns)} {
  box-sizing: border-box;
  flex: 1 0 auto;
  flex-flow: row wrap;
  min-height: 1px;
  position: relative;
  width: 100%;
  
  @if $column-order-classes == true {
    // all columns are given an order # by default
    order: ($columns + 1);
    
    @for $i from 1 through $columns {
      &.order-#{$i} { order: $i; }
    }
  }
  @if $column-gutter == true {
    padding-left: $column-gutter-space;
    padding-right: $column-gutter-space;
  }
  @if $column-gutter-bottom == true {
    padding-bottom: $column-bottom-space;
  }

  &.collapsed { padding-left: 0; padding-right: 0; padding-bottom: 0; }
}

//
// grid + offset generator
//

@each $break in $breakpoints {
  $name: nth($break, 1); // take only the name of the breakpoint, NOT its value.
  @include breakpoint-up($name) {
    @for $i from 1 through $columns {
      // width names
      .#{$name}-#{$i} {
        flex: 0 0 percentage($i / $columns);
        width: percentage($i / $columns);
        max-width: percentage($i / $columns);
      }
    }
  }
}
