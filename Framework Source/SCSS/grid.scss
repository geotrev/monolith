// Monolith CSS â€“ A super-powered CSS grid built for any page layout imagineable.

//
// Choose class names. Defaults: .container | .row | .column
//

$class-names: (
  container: 'container',
  row: 'row',
  column: 'column'
);

//
// Choose breakpoint names and values.
// *** NOTE: They are shared with breakpoint @mixin utilities & the grid generator
//

$breakpoints: (
  xsmall: 0,
   small: 576px,
  medium: 768px,
   large: 992px,
  xlarge: 1200px
);

//
// Choose container width modifier classes and their values
// Ex. class="narrow container"
//

$container-widths: (
   fluid: 100%,
  narrow: 768px,
    wide: 1200px
);

//
// Choose section names and padding for extra vertical space to focus content
// Ex. class="small-section wide container"
//

$container-sections: (
   small: 48px,
  medium: 96px,
   large: 144px
);

//
// Define column count and default spacing values for gutters
//

$columns: 12;
$default-space: 16px;
$order-threshold: 20;

//
// Container and column spacing options + column flex order utility classes
//

$container-padding:     true;
$column-gutter:         true;
$column-bottom-padding: true;
$column-order-classes:  true;
$column-offset-classes: true;

//
// Default width for container + spacing (if enabled)
//

$container-default-width:     992px;
$container-space:             $default-space;
$column-gutter-space:         $default-space / 2;
$column-bottom-padding-space: $default-space;

//
// Breakpoint Mixins
// Use in your css for custom breakpoint behavior.
// *** NOTE: changes your breakpoint names will change your mixin arguments
//

// Breakpoint Up
// Ex. @include breakpoint-up(small) { ... }
//      ^-- applies styles to all sizes above "small" breakpoint

@mixin breakpoint-up($size) {
  @media screen and (min-width: #{map-get($breakpoints, $size)}) {
    @content;
  }
}

// Breakpoint Down
// Ex. @include breakpoint-down(medium) { ... }
//      ^-- applies styles to all sizes below "medium" breakpoint

@mixin breakpoint-down($size) {
  @media screen and (max-width: #{map-get($breakpoints, $size) - 1}) {
    @content;
  }
} // "-1" prevents overlap of 1px against next breakpoint

// Breakpoint Only
// Ex. @include breakpoint-only(small, xsmall) { ... }
//      ^-- applies styles only to "small" through "xsmall" breakpoints

@mixin breakpoint-only($min, $max) {
  @media screen
    and (min-width: #{map-get($breakpoints, $min)})
    and (max-width: #{map-get($breakpoints, $max) - 1}) {
      @content;
  } // "-1" prevents overlap of 1px against next breakpoint
}

//
// Containers, rows, and columns
//

// Helpers

$container: map-get($class-names, container);
$row: map-get($class-names, row);
$column: map-get($class-names, column);

// ::after and ::before resets for older browsers

.#{$container}::before,
.#{$container}::after,
.#{$container} .#{$row}::before,
.#{$container} .#{$row}::after {
  display: block;
  padding: 0; margin: 0;
  height: 0; width: 0;
}

// Container

.#{$container} {
  margin: 0 auto;
  position: relative;
  max-width: $container-default-width;

  @if $container-padding == true {
    padding-left: $container-space;
    padding-right: $container-space;
  } // end @if

  @each $name, $width in $container-widths {
    &.#{$name} { max-width: $width; }
  } // end @each

  @each $name, $padding in $container-sections {
    &.#{$name}-section { padding-top: $padding; padding-bottom: $padding; }
  } // end @each

} // end container

// Row

.#{$row} {
  display: flex;
  flex-flow: row wrap;
  position: relative;
  flex: 1 0 auto;
  width: 100%;

  &.collapsed {
    .#{$column}s, .#{$column} {
      padding-left: 0;
      padding-right: 0;
      padding-bottom: 0;
    }
  }
}

// Column

.#{$column}s, .#{$column} {
  box-sizing: border-box;
  flex: 1 0 100%;
  min-height: 1px;
  min-width: 0;
  word-wrap: break-word;
  max-width: 100%;

  @if $column-order-classes == true {
    order: 999;
  }

  @if $column-gutter == true {
    padding-left: $column-gutter-space;
    padding-right: $column-gutter-space;
  }

  @if $column-bottom-padding == true {
    padding-bottom: $column-bottom-padding-space;
  }

} // end column

//
// Grid, offset, and order classes generator
//

@each $break in $breakpoints {
  $name: nth($break, 1); // take only the name of the breakpoint, NOT its value.
  @include breakpoint-up($name) {
    @for $i from 1 through $columns {

      .#{$name}-#{$i} {
        flex: 0 0 percentage($i / $columns);
        max-width: percentage($i / $columns);
      }
      @if $column-offset-classes == true {
        .#{$name}-offset-#{$i} {
          margin-left: percentage($i / $columns);
        }
      }
      @if $column-order-classes == true {
        .#{$name}-order-#{$i} { order: $i; }
      }

    } // end @for
  } // end @include
} // end @each
