// Monolith CSS
// A super-powered CSS grid built for any page layout imagineable.

$scope: '' !default;

$xsmall: $scope + xsmall;
$small: $scope + small;
$medium: $scope + medium;
$large: $scope + large;
$xlarge: $scope + xlarge;

$class-names: (
  container: $scope + 'container',
  row: $scope + 'row',
  column: $scope + 'column'
) !default;

$breakpoints: (
  $xsmall: 0,
   $small: 576px,
  $medium: 768px,
   $large: 992px,
  $xlarge: 1200px
) !default;

$container-widths: (
   $scope + fluid: 100%,
  $scope + narrow: 768px,
    $scope + wide: 1200px
) !default;

$container-sections: (
   $small: 48px,
  $medium: 96px,
   $large: 144px
) !default;

$columns: 12 !default;
$default-space: 16px !default;
$order-threshold: 20 !default;

$container-padding:     true;
$column-gutter:         true;
$column-bottom-padding: true;
$column-order-classes:  true;
$column-offset-classes: true;

$container-default-width:     992px;
$container-space:             $default-space;
$column-gutter-space:         $default-space / 2;
$column-bottom-padding-space: $default-space;

//
// Breakpoint Mixins
// Use in your css for custom breakpoint behavior.
//

@mixin breakpoint-up($size) {
  @media screen and (min-width: #{map-get($breakpoints, $size)}) {
    @content;
  }
} // end @mixin

@mixin breakpoint-down($size) {
  @media screen and (max-width: #{map-get($breakpoints, $size) - 1}) {
    @content;
  } // "-1" prevents overlap of 1px against next breakpoint
} // end @mixin |||

@mixin breakpoint-only($min, $max) {
  @media screen
    and (min-width: #{map-get($breakpoints, $min)})
    and (max-width: #{map-get($breakpoints, $max) - 1}) {
      @content;
  } // "-1" prevents overlap of 1px against next breakpoint
} // end @mixin

//
// Containers, rows, and columns
//

$container: map-get($class-names, container);
$row: map-get($class-names, row);
$column: map-get($class-names, column);

.#{$container}::before,
.#{$container}::after,
.#{$container} .#{$row}::before,
.#{$container} .#{$row}::after,
.#{$row} .#{$column}::before, .#{$row} .#{$column}::after,
.#{$row} .#{$column}s::before, .#{$row} .#{$column}s::after {
  display: block;
  padding: 0; margin: 0;
  height: 0; width: 0;
}

.#{$container} {
  box-sizing: border-box;
  display: flex;
  margin: 0 auto;
  position: relative;
  max-width: $container-default-width;

  @if $container-padding == true {
    padding-left: $container-space;
    padding-right: $container-space;
  } // end @if

  @each $name, $width in $container-widths {
    &.#{$name} { max-width: $width; }
  } // end @each

  @each $name, $padding in $container-sections {
    &.#{$name}-section { padding-top: $padding; padding-bottom: $padding; }
  } // end @each

  &.#{$scope}fullscreen {
    box-sizing: border-box;
    height: 100vh;
    max-width: unset;
    width: 100vw;

    .#{$row} { flex: 1 1 auto; }

    .#{$row} {
      &.#{$scope}align-top    { align-content: flex-start; }
      &.#{$scope}align-middle { align-content: center;  }
      &.#{$scope}align-bottom { align-content: flex-end; }
    }
  } // end fullscreen

} // end container

.#{$row} {
  display: flex;
  flex-flow: row wrap;
  position: relative;
  flex: 1 0 auto;
  width: 100%;

  &.#{$scope}collapsed {
    .#{$column}s, .#{$column} {
      padding-left: 0;
      padding-right: 0;
      padding-bottom: 0;
    }
  }
}

.#{$column}s, .#{$column} {
  box-sizing: border-box;
  flex: 1 0 100%;
  min-height: 1px;
  min-width: 0;
  word-wrap: break-word;
  max-width: 100%;

  @if $column-order-classes == true {
    order: 999;
  }

  @if $column-gutter == true {
    padding-left: $column-gutter-space;
    padding-right: $column-gutter-space;
  }

  @if $column-bottom-padding == true {
    padding-bottom: $column-bottom-padding-space;
  }

} // end column

//
// Grid, offset, and order classes generator
//

@each $name in $breakpoints {
  $break: nth($name, 1); // take only the name of the breakpoint, NOT its value.

  @include breakpoint-up($break) {
    @for $i from 1 through $columns {

      .#{$break}-#{$i} {
        flex: 0 0 percentage($i / $columns);
        max-width: percentage($i / $columns);
      }
      @if $column-offset-classes == true {
        .#{$break}-offset-#{$i} {
          margin-left: percentage($i / $columns);
        }
      }
      @if $column-order-classes == true {
        .#{$break}-order-#{$i} { order: $i; }
      }

    } // end @for
  } // end @include

} // end @each
